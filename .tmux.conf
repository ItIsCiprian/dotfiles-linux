##### â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
#####  TMUX CONFIG â€” Linux â€¢ Zsh â€¢ Truecolor â€¢ Catppuccin â€¢ TPM
#####  Requires tmux â‰¥ 3.2 for best results
#####  Prefix: Ctrl-a  |  Reload: Prefix + r
##### â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€

##### Shell & Terminal #########################################################

# Use zsh if available; otherwise fall back to current $SHELL
if-shell '[ -x /usr/bin/zsh ]'  'set -g default-shell /usr/bin/zsh'
if-shell '[ -x /bin/zsh ]'      'set -g default-shell /bin/zsh'
if-shell '[ -z "#{client_shell}" ]' 'set -g default-shell "$SHELL"'

# 24-bit color & terminfo
set -g default-terminal "tmux-256color"
set -as terminal-overrides ',xterm-256color:RGB,screen-256color:RGB,tmux-256color:RGB,ghostty:RGB'
set -as terminal-overrides ',*:Tc'

# Faster ESC (better for Neovim)
set -sg escape-time 10

# Improve rendering & history
set -g history-limit 100000
set -g aggressive-resize on
set -g focus-events on

##### UX Basics ###############################################################

# Status bar at the top
set -g status-position top
set -g status-interval 5
set -g display-time 2000

# Indexing from 1 (easier on the brain)
set -g base-index 1
setw -g pane-base-index 1
set -g renumber-windows on

# Mouse & vi-mode
set -g mouse on
setw -g mode-keys vi

# Quieter terminal
set -g bell-action none
set -g visual-activity on

# Let tmux integrate with terminal clipboard where supported
# (works with Ghostty/foot/kitty etc. that support OSC 52)
set -g set-clipboard on

##### Prefix & Core Keybinds ###################################################

# Prefix to Ctrl-a (GNU screen muscle memory)
unbind C-b
set -g prefix C-a
bind C-a send-prefix

# Reload config (Prefix + r)
unbind r
bind r source-file ~/.tmux.conf \; display-message "âœ” tmux.conf reloaded"

# Pane navigation (vim homerow)
bind h select-pane -L
bind j select-pane -D
bind k select-pane -U
bind l select-pane -R

# Smart splits open in the current pane's path
unbind %
bind | split-window -h -c '#{pane_current_path}'
unbind '"'
bind - split-window -v -c '#{pane_current_path}'

# Resize panes with Shift + H/J/K/L (repeatable)
bind -r H resize-pane -L 5
bind -r J resize-pane -D 5
bind -r K resize-pane -U 5
bind -r L resize-pane -R 5

# Maximize/restore pane
bind m resize-pane -Z

# New window in current path
bind c new-window -c '#{pane_current_path}'

# Swap panes easily (Prefix + { / })
bind { swap-pane -U
bind } swap-pane -D

# Toggle synchronize-panes (type once to broadcast to all panes)
bind y set-window-option synchronize-panes \; display-message "sync-panes: #{?pane_synchronized,on,off}"

##### Copy Mode (vi) + System Clipboard ########################################

# Vi-like selection
bind -T copy-mode-vi v send -X begin-selection
bind -T copy-mode-vi V send -X select-line
bind -T copy-mode-vi C-v send -X rectangle-toggle
bind -T copy-mode-vi y send -X copy-selection
unbind -T copy-mode-vi MouseDragEnd1Pane

# Pipe yanks to system clipboard (Wayland/X11) when available
# Wayland: wl-copy; X11: xclip -selection clipboard; macOS: pbcopy (just in case)
set -g @copy_to_clipboard ' \
  if command -v wl-copy >/dev/null 2>&1; then wl-copy; \
  elif command -v xclip >/dev/null 2>&1; then xclip -in -selection clipboard; \
  elif command -v pbcopy >/dev/null 2>&1; then pbcopy; \
  else cat >/dev/null; fi \
'

# Yank selection â†’ tmux buffer â†’ system clipboard
bind -T copy-mode-vi Y send -X copy-pipe-and-cancel "#{@copy_to_clipboard}"
bind y run "tmux save-buffer - | sh -c '#{@copy_to_clipboard}'" \; display-message "ðŸ“‹ copied"

##### Theme: Catppuccin ########################################################
# Plugin provides these; tweak as you like
set -g @catppuccin_flavor "macchiato"
set -g @catppuccin_window_status_style "rounded"
set -g @catppuccin_window_left_separator "î‚¶"
set -g @catppuccin_window_right_separator "î‚´ "
set -g @catppuccin_window_middle_separator " â–ˆ"
set -g @catppuccin_window_number_position "right"

set -g @catppuccin_window_default_fill "number"
set -g @catppuccin_window_default_text "#W"

set -g @catppuccin_window_current_fill "number"
set -g @catppuccin_window_current_text "#W"

set -g @catppuccin_status_modules_right "directory session"
set -g @catppuccin_status_left_separator  " î‚¶"
set -g @catppuccin_status_right_separator "î‚´"
set -g @catppuccin_status_right_separator_inverse "no"
set -g @catppuccin_status_fill "icon"
set -g @catppuccin_status_connect_separator "no"
set -g @catppuccin_directory_text "#{pane_current_path}"

##### Plugins (TPM) ############################################################
# Use XDG-friendly path (matches your setup)
set-environment -g TMUX_PLUGIN_MANAGER_PATH '~/.config/tmux/plugins'

# Core plugins
set -g @plugin 'tmux-plugins/tpm'
set -g @plugin 'christoomey/vim-tmux-navigator'
set -g @plugin 'catppuccin/tmux'

# Session save/restore
set -g @plugin 'tmux-plugins/tmux-resurrect'
set -g @resurrect-capture-pane-contents 'on'
set -g @resurrect-strategy-vim 'session'
set -g @resurrect-strategy-nvim 'session'

# Auto-save sessions; restore on boot/login
set -g @plugin 'tmux-plugins/tmux-continuum'
set -g @continuum-restore 'on'
set -g @continuum-boot 'on'
set -g @continuum-save-interval '10'

# Auto-install TPM if missing (first run safety)
if-shell '[ ! -d ~/.config/tmux/plugins/tpm ]' \
  'run-shell "git clone https://github.com/tmux-plugins/tpm ~/.config/tmux/plugins/tpm"'

# Initialize TPM (keep LAST)
run '~/.config/tmux/plugins/tpm/tpm'
